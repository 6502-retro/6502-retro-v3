.byte  $00, $00, $00, $00, $00, $00, $00, $00 ; $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00 ; $0F
.byte  $00, $00, $00, $00, $00, $00, $00, $00 ; $10
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00
.byte  $00, $00, $00, $00, $00, $00, $00, $00 
.byte  $00, $00, $00, $00, $00, $00, $00, $00 ; $1F

.byte  $00, $00, $00, $00, $00, $00, $00, $00 ; $20 // space
.byte  $20, $20, $20, $20, $20, $00, $20, $00 ; // !
.byte  $50, $50, $00, $00, $00, $00, $00, $00 ; // "
.byte  $50, $50, $f8, $50, $f8, $50, $50, $00 ; // #
.byte  $20, $78, $a0, $70, $28, $f0, $20, $00 ; // $
.byte  $c0, $c8, $10, $20, $40, $98, $18, $00 ; //%
.byte  $60, $90, $a0, $40, $a8, $90, $68, $00 ; // &
.byte  $60, $20, $40, $00, $00, $00, $00, $00 ; // '
.byte  $10, $20, $40, $40, $40, $20, $10, $00 ; // (
.byte  $40, $20, $10, $10, $10, $20, $40, $00 ; // )
.byte  $00, $20, $a8, $70, $a8, $20, $00, $00 ; // *
.byte  $00, $20, $20, $f8, $20, $20, $00, $00 ; // +
.byte  $00, $00, $00, $00, $60, $20, $40, $00 ; //,
.byte  $00, $00, $00, $f8, $00, $00, $00, $00 ; // -
.byte  $00, $00, $00, $00, $00, $60, $60, $00 ; // .
.byte  $00, $08, $10, $20, $40, $80, $00, $00 ; // /
.byte  $70, $88, $98, $a8, $c8, $88, $70, $00 ; // 0
.byte  $20, $60, $20, $20, $20, $20, $70, $00 ; // 1
.byte  $70, $88, $08, $10, $20, $40, $f8, $00 ; // 2
.byte  $f8, $10, $20, $10, $08, $88, $70, $00 ; // 3
.byte  $10, $30, $50, $90, $f8, $10, $10, $00 ; // 4
.byte  $f8, $80, $f0, $08, $08, $88, $70, $00 ; // 5
.byte  $30, $40, $80, $f8, $88, $88, $70, $00 ; // 6
.byte  $f8, $08, $10, $20, $40, $40, $40, $00 ; // 7
.byte  $70, $88, $88, $70, $88, $88, $70, $00 ; // 8
.byte  $70, $88, $88, $78, $08, $10, $60, $00 ; // 9
.byte  $00, $30, $30, $00, $30, $30, $00, $00 ; // :
.byte  $00, $30, $30, $00, $30, $10, $20, $00 ; // , //
.byte  $10, $20, $40, $80, $40, $20, $10, $00 ; // <
.byte  $00, $00, $F8, $00, $F8, $00, $00, $00 ; /*=*/
.byte  $40, $20, $10, $08, $10, $20, $40, $00 ; // >
.byte  $70, $88, $08, $10, $20, $00, $20, $00 ; // ?
.byte  $70, $88, $08, $68, $a8, $a8, $70, $00 ; // @
.byte  $70, $88, $88, $88, $f8, $88, $88, $00 ; // A
.byte  $f0, $88, $88, $f0, $88, $88, $f0, $00 ; // B
.byte  $70, $88, $80, $80, $80, $88, $70, $00 ; // C
.byte  $e0, $90, $88, $88, $88, $90, $e0, $00 ; // D
.byte  $f8, $80, $80, $f0, $80, $80, $f8, $00 ; // E
.byte  $f8, $80, $80, $f0, $80, $80, $80, $00 ; // F
.byte  $70, $88, $80, $b8, $88, $88, $78, $00 ; // G
.byte  $88, $88, $88, $f8, $88, $88, $88, $00 ; // H
.byte  $70, $20, $20, $20, $20, $20, $70, $00 ; // I
.byte  $38, $10, $10, $10, $10, $90, $60, $00 ; // J
.byte  $88, $90, $a0, $c0, $a0, $90, $88, $00 ; // K
.byte  $80, $80, $80, $80, $80, $80, $f8, $00 ; // L
.byte  $88, $d8, $a8, $a8, $88, $88, $88, $00 ; // M
.byte  $88, $c8, $a8, $98, $88, $88, $88, $00 ; // N
.byte  $70, $88, $88, $88, $88, $88, $70, $00 ; // O
.byte  $f0, $88, $88, $f0, $80, $80, $80, $00 ; // P
.byte  $70, $88, $88, $88, $a8, $90, $68, $00 ; // Q
.byte  $f0, $88, $88, $f0, $a0, $90, $88, $00 ; // R
.byte  $78, $80, $80, $70, $08, $08, $f0, $00 ; // S
.byte  $f8, $20, $20, $20, $20, $20, $20, $00 ; // T
.byte  $88, $88, $88, $88, $88, $88, $70, $00 ; // U
.byte  $88, $88, $88, $88, $88, $50, $20, $00 ; // V
.byte  $88, $88, $88, $88, $a8, $a8, $50, $00 ; // W
.byte  $88, $88, $50, $20, $50, $88, $88, $00 ; // X
.byte  $88, $88, $88, $50, $20, $20, $20, $00 ; // Y
.byte  $f8, $08, $10, $20, $40, $80, $f8, $00 ; // Z
.byte  $70, $40, $40, $40, $40, $40, $70, $00 ; // [
.byte  $00, $80, $40, $20, $10, $08, $00, $00 ; // backslash
.byte  $70, $10, $10, $10, $10, $10, $70, $00 ; // ]
.byte  $20, $50, $88, $00, $00, $00, $00, $00 ; // ^
.byte  $00, $00, $00, $00, $00, $00, $f8, $00 ; // _
.byte  $40, $20, $10, $00, $00, $00, $00, $00 ; // `
.byte  $00, $00, $70, $08, $78, $88, $78, $00 ; // a
.byte  $00, $80, $80, $b0, $c8, $88, $f0, $00 ; // b
.byte  $00, $00, $70, $80, $80, $88, $70, $00 ; // c
.byte  $08, $08, $08, $68, $98, $88, $78, $00 ; // d
.byte  $00, $00, $70, $88, $f8, $80, $70, $00 ; // e
.byte  $30, $48, $40, $e0, $40, $40, $40, $00 ; // f
.byte  $00, $78, $88, $88, $78, $08, $70, $00 ; // g
.byte  $80, $80, $b0, $c8, $88, $88, $88, $00 ; // h
.byte  $00, $20, $00, $20, $20, $20, $20, $00 ; // i
.byte  $10, $00, $30, $10, $10, $90, $60, $00 ; // j
.byte  $80, $80, $90, $a0, $c0, $a0, $90, $00 ; // k
.byte  $60, $20, $20, $20, $20, $20, $70, $00 ; // l
.byte  $00, $00, $d0, $a8, $a8, $88, $88, $00 ; // m
.byte  $00, $00, $b0, $c8, $88, $88, $88, $00 ; // n
.byte  $00, $00, $70, $88, $88, $88, $70, $00 ; // o
.byte  $00, $00, $f0, $88, $f0, $80, $80, $00 ; // p
.byte  $00, $00, $68, $98, $78, $08, $08, $00 ; // q
.byte  $00, $00, $b0, $c8, $80, $80, $80, $00 ; // r
.byte  $00, $00, $70, $80, $70, $08, $f0, $00 ; // s
.byte  $40, $40, $e0, $40, $40, $48, $30, $00 ; // t
.byte  $00, $00, $88, $88, $88, $98, $68, $00 ; // u
.byte  $00, $00, $88, $88, $88, $50, $20, $00 ; // v
.byte  $00, $00, $88, $88, $a8, $a8, $50, $00 ; // w
.byte  $00, $00, $88, $50, $20, $50, $88, $00 ; // x
.byte  $00, $00, $88, $88, $78, $08, $70, $00 ; // y
.byte  $00, $00, $f8, $10, $20, $40, $f8, $00 ; // z
.byte  $10, $20, $20, $40, $20, $20, $10, $00 ; // {
.byte  $20, $20, $20, $20, $20, $20, $20, $00 ; // |
.byte  $20, $10, $10, $08, $10, $10, $20, $00 ; // }
.byte  $00, $28, $50, $00, $00, $00, $00, $00 ; // ~(127th char, last ASCII char)

